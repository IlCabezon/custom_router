import{jsx as _jsx}from"react/jsx-runtime";import{Children,useEffect,useState}from"react";import{node}from"prop-types";import{match}from"path-to-regexp";import{EVENTS}from"../const";import NotFound from"../pages/NotFound";import{getCurrentPath}from"../utils/path";export default function Router({children,DefaultComponent=NotFound}){const[currentPath,setCurrentPath]=useState(getCurrentPath());useEffect(()=>{const onLocationChange=()=>{setCurrentPath(getCurrentPath())};window.addEventListener(EVENTS.PUSHSTATE,onLocationChange);window.addEventListener(EVENTS.POPSTATE,onLocationChange);return()=>{window.removeEventListener(EVENTS.PUSHSTATE,onLocationChange);window.removeEventListener(EVENTS.POPSTATE,onLocationChange)}},[]);let routeParams={};let queryParams={};const routesFromChildren=(Children.map(children,({type,props})=>{const{name}=type;const isRoute=name==="Route";if(!isRoute)return null;return props})||[]).filter(Boolean);const Page=routesFromChildren.find(({path})=>{window.location.search;if(window.location.search){const formattedSearch=window.location.search.replace("?","").split("&");for(const search of formattedSearch){search.split("=");const[key,value]=search.split("=");queryParams[key]=value}}if(path===currentPath)return true;const matcherUrl=match(path,{decode:decodeURIComponent},{sensitive:true});const matched=matcherUrl(currentPath);if(!matched)return false;routeParams=matched.params;return true})?.Component;return Page?_jsx(Page,{routeParams:routeParams,queryParams:queryParams}):_jsx(DefaultComponent,{routeParams:routeParams,queryParams:queryParams})}Router.propTypes={children:node,DefaultComponent:node};